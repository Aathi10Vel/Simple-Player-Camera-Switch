using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FollowCamera : MonoBehaviour {

	public Transform targetPlayer;
	Camera playerCamera;
	public PlayerMove getActions; // Get Action from the PlayerMove Script 
	public float cameraDistance =5.0f; // Camera Distance for Third Person View.
	public float sensitivity=5.0f;
	public float smoothing=2.0f;

	public Vector2 mouseLook;
	public Vector2 rotateVert;

	public Quaternion camRotateX;
	public Quaternion camRotateXY;

	public Vector3 lookOffset; //For Third Person Look.
	public Vector3 camPosition;

	public bool camSwitch;

	// Use this for initialization
	void Start () {
		camSwitch = true;
		getActions = FindObjectOfType<PlayerMove> ();
		playerCamera = GetComponent<Camera> ();
		lookOffset = playerCamera.transform.position - targetPlayer.transform.position;

	}
	
	// Update is called once per frame
	void Update () {
		camControl ();
	}

	public void camControl(){
		var md = new Vector2 (Input.GetAxisRaw ("Mouse X"), Input.GetAxisRaw ("Mouse Y"));
		md = Vector2.Scale (md,new Vector2 (sensitivity * smoothing, sensitivity * smoothing));
		rotateVert.x = Mathf.Lerp (rotateVert.x, md.x, 1f / smoothing);
		rotateVert.y = Mathf.Lerp (rotateVert.y, md.y, 1f / smoothing);
		mouseLook += rotateVert;
		mouseLook.y = Mathf.Clamp (mouseLook.y, -40, 40);

		camRotateX = Quaternion.Euler (0, mouseLook.x, 0);
		camRotateXY = Quaternion.Euler (-mouseLook.y, mouseLook.x, 0);

		if (getActions.checkActions == true) { //This get the value from the Player Move Script
			targetPlayer.eulerAngles = new Vector3 (0, camRotateX.eulerAngles.y, 0);
		} else {
			Vector3 lookPoint = targetPlayer.transform.position;
			playerCamera.transform.LookAt (lookPoint + lookOffset);
		}

		if (Input.GetKeyDown (KeyCode.C)) {
			camSwitch = !camSwitch;
		}

		//Here Goes the Script for the CAMERA VIEW SWITCH

		switch (camSwitch) {
		case true:
			{
				camPosition = targetPlayer.position - (camRotateX * new Vector3 (0, 0, 0) + new Vector3 (0, -lookOffset.y, -lookOffset.z));
				break;
			}
		case false:
			{
				camPosition = targetPlayer.position - (camRotateXY * Vector3.forward * cameraDistance + new Vector3 (0, -lookOffset.y, 0));
				break;
			}
		default:
			{
				Debug.Log ("Not Responding");
				break;
			}
		}

		playerCamera.transform.rotation = camRotateXY;
		playerCamera.transform.position = camPosition;
	}
}
